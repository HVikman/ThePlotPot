{"version":3,"file":"static/js/873.6906dbc0.chunk.js","mappings":"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","sources":["components/utilities/TextEditor/TextEditor.jsx","pages/newstory/AddChapter.jsx","hooks/useCreateChapter.js"],"sourcesContent":["import React from 'react'\r\nimport { useEditor, EditorContent } from '@tiptap/react'\r\nimport StarterKit from '@tiptap/starter-kit'\r\nimport Heading from '@tiptap/extension-heading'\r\nimport Bold from '@tiptap/extension-bold'\r\nimport Italic from '@tiptap/extension-italic'\r\nimport Underline from '@tiptap/extension-underline'\r\nimport Blockquote from '@tiptap/extension-blockquote'\r\nimport BulletList from '@tiptap/extension-bullet-list'\r\nimport OrderedList from '@tiptap/extension-ordered-list'\r\nimport CharacterCount from '@tiptap/extension-character-count'\r\nimport { TypeBold, TypeItalic, TypeUnderline, Quote, ListUl, ListOl, TextParagraph } from 'react-bootstrap-icons'\r\nimport './TextEditor.css'\r\n\r\nconst TextEditor = ({ content, onUpdate, characterLimit = 12000 }) => {\r\n  const editor = useEditor({\r\n    extensions: [\r\n      StarterKit,\r\n      Heading.configure({ levels: [1, 2, 3] }),\r\n      Bold,\r\n      Italic,\r\n      Underline,\r\n      Blockquote,\r\n      BulletList,\r\n      OrderedList,\r\n      CharacterCount.configure({ limit: characterLimit }),\r\n    ],\r\n    content,\r\n    onUpdate: ({ editor }) => {\r\n      if (onUpdate) {\r\n        onUpdate(editor.getHTML())\r\n      }\r\n    },\r\n  })\r\n\r\n  if (!editor) return null\r\n\r\n  return (\r\n    <div className=\"rich-text-editor\">\r\n      <div className=\"editor-toolbar\">\r\n        <button onClick={() => editor.chain().focus().toggleBold().run()} className={editor.isActive('bold') ? 'active' : ''}>\r\n          <TypeBold />\r\n        </button>\r\n        <button onClick={() => editor.chain().focus().toggleItalic().run()} className={editor.isActive('italic') ? 'active' : ''}>\r\n          <TypeItalic />\r\n        </button>\r\n        <button onClick={() => editor.chain().focus().toggleUnderline().run()} className={editor.isActive('underline') ? 'active' : ''}>\r\n          <TypeUnderline />\r\n        </button>\r\n        <button onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()} className={editor.isActive('heading', { level: 1 }) ? 'active' : ''}>\r\n          <TextParagraph /> H1\r\n        </button>\r\n        <button onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()} className={editor.isActive('heading', { level: 2 }) ? 'active' : ''}>\r\n          <TextParagraph /> H2\r\n        </button>\r\n        <button onClick={() => editor.chain().focus().toggleHeading({ level: 3 }).run()} className={editor.isActive('heading', { level: 3 }) ? 'active' : ''}>\r\n          <TextParagraph /> H3\r\n        </button>\r\n        <button onClick={() => editor.chain().focus().toggleBulletList().run()} className={editor.isActive('bulletList') ? 'active' : ''}>\r\n          <ListUl />\r\n        </button>\r\n        <button onClick={() => editor.chain().focus().toggleOrderedList().run()} className={editor.isActive('orderedList') ? 'active' : ''}>\r\n          <ListOl />\r\n        </button>\r\n        <button onClick={() => editor.chain().focus().toggleBlockquote().run()} className={editor.isActive('blockquote') ? 'active' : ''}>\r\n          <Quote />\r\n        </button>\r\n      </div>\r\n\r\n      <div>\r\n        <EditorContent editor={editor} data-placeholder=\"Start typing here...\" className=\"editor-content\" />\r\n      </div>\r\n\r\n      <div className=\"character-count\">\r\n        {editor.storage.characterCount.characters()}/{characterLimit} characters\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TextEditor\r\n","import { useLocation } from 'react-router-dom'\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { Form, FormControl, Button } from 'react-bootstrap'\r\nimport TextEditor from '../../components/utilities/TextEditor'\r\nimport { useCreateChapter } from '../../hooks/useCreateChapter.js'\r\nimport { useNotifications } from '../../context/NotificationsContext'\r\nimport { useDarkMode } from '../../context/DarkModeContext'\r\nimport '../../utils/theme.css'\r\n\r\nconst MAX_CHARACTERS = 12000\r\n\r\nconst validationSchema = Yup.object({\r\n  title: Yup.string()\r\n    .required('Required')\r\n    .max(100, 'Must be 100 characters or less'),\r\n  content: Yup.string()\r\n    .required('Required')\r\n    .max(MAX_CHARACTERS, `Content must be ${MAX_CHARACTERS} characters or less`),\r\n})\r\n\r\nconst initialValues = {\r\n  title: '',\r\n  content: '',\r\n  honeypot: '',\r\n}\r\n\r\nconst AddChapter = () => {\r\n  const { isDarkMode } = useDarkMode()\r\n  const location = useLocation()\r\n  const { storyId, parentChapter, navigationStack } = location.state\r\n  const { addNotification } = useNotifications()\r\n  const [createChapter] = useCreateChapter(storyId, parentChapter, navigationStack, addNotification)\r\n\r\n  const formik = useFormik({\r\n    initialValues,\r\n    validationSchema,\r\n    onSubmit: (values) => {\r\n\r\n      if (values.honeypot) {\r\n        console.log('Bot detected')\r\n        return\r\n      }\r\n      createChapter({\r\n        variables: {\r\n          storyId: storyId,\r\n          parentChapterId: parentChapter.id,\r\n          branch: parentChapter.branch + 1,\r\n          title: values.title,\r\n          content: values.content,\r\n        },\r\n      }).catch((error) => {\r\n        console.error('There was an error creating the chapter:', error)\r\n        addNotification(error.message, 3000, 'error')\r\n      })\r\n    },\r\n  })\r\n\r\n  const handleEditorUpdate = (updatedContent) => {\r\n    formik.setFieldValue('content', updatedContent)\r\n  }\r\n\r\n  return (\r\n    <div className=\"add-chapter-container mx-4\">\r\n      <h2>Add a New Chapter</h2>\r\n      <Form onSubmit={formik.handleSubmit} className={`${isDarkMode ? 'dark-mode' : 'light-mode'}`}>\r\n\r\n        <Form.Group controlId=\"formTitle\">\r\n          <Form.Label>Title</Form.Label>\r\n          <FormControl\r\n            type=\"text\"\r\n            placeholder=\"Give your story a cool title\"\r\n            name=\"title\"\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            value={formik.values.title}\r\n          />\r\n          <div\r\n            className={`character-counter ${\r\n              formik.values.title.length > 80 ? 'warning' : ''\r\n            }`}\r\n          >\r\n            {formik.values.title.length}/100 characters\r\n          </div>\r\n          {formik.touched.title && formik.errors.title && (\r\n            <Form.Text className=\"text-danger\">{formik.errors.title}</Form.Text>\r\n          )}\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formHoneypot\">\r\n          <FormControl\r\n            type=\"text\"\r\n            name=\"honeypot\"\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            value={formik.values.honeypot}\r\n            style={{ display: 'none' }}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formContent\">\r\n          <Form.Label>Content</Form.Label>\r\n          <TextEditor\r\n            content={formik.values.content}\r\n            onUpdate={handleEditorUpdate}\r\n            characterLimit={MAX_CHARACTERS}\r\n          />\r\n          {formik.touched.content && formik.errors.content && (\r\n            <Form.Text className=\"text-danger\">{formik.errors.content}</Form.Text>\r\n          )}\r\n        </Form.Group>\r\n\r\n        <Button variant=\"secondary\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddChapter\r\n","import { useMutation } from '@apollo/client'\r\nimport { CREATE_CHAPTER, GET_STORY_BY_ID, GET_CHAPTER_CHILDREN } from '../api/queries'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nexport const useCreateChapter = (storyId, parentChapter, navigationStack, addNotification) => {\r\n  const navigate = useNavigate()\r\n\r\n  const [createChapter, { error }] = useMutation(CREATE_CHAPTER, {\r\n    update: (cache, { data: { createChapter } }) => {\r\n      try {\r\n        const { getStory } = cache.readQuery({\r\n          query: GET_STORY_BY_ID,\r\n          variables: { id: storyId }\r\n        })\r\n\r\n        const updatedChapters = [...getStory.chapters, createChapter]\r\n\r\n        cache.writeQuery({\r\n          query: GET_STORY_BY_ID,\r\n          variables: { id: storyId },\r\n          data: {\r\n            getStory: {\r\n              ...getStory,\r\n              chapters: updatedChapters\r\n            }\r\n          }\r\n        })\r\n\r\n        const { getChapterChildren } = cache.readQuery({\r\n          query: GET_CHAPTER_CHILDREN,\r\n          variables: { id: parentChapter.id }\r\n        })\r\n\r\n        const updatedChildren = [...getChapterChildren, createChapter]\r\n\r\n        cache.writeQuery({\r\n          query: GET_CHAPTER_CHILDREN,\r\n          variables: { id: parentChapter.id },\r\n          data: {\r\n            getChapterChildren: updatedChildren\r\n          }\r\n        })\r\n        addNotification(`${createChapter.title} created successfully!`, 2000, 'success')\r\n        console.log(createChapter)\r\n        navigate(`/story/${storyId}`, {\r\n          state: {\r\n            chapter: createChapter,\r\n            navigationStack: [...navigationStack, parentChapter]\r\n          }\r\n        })\r\n      } catch (error) {\r\n        console.error('Error updating cache after adding chapter:', error)\r\n        addNotification(error.message, 2000, 'error')\r\n      }\r\n    }\r\n  })\r\n\r\n  return [createChapter, error]\r\n}"],"names":["_ref","content","onUpdate","characterLimit","editor","useEditor","extensions","StarterKit","Heading","configure","levels","Bold","Italic","Underline","Blockquote","BulletList","OrderedList","CharacterCount","limit","_ref2","getHTML","_jsxs","className","children","_jsx","onClick","chain","focus","toggleBold","run","isActive","TypeBold","toggleItalic","TypeItalic","toggleUnderline","TypeUnderline","toggleHeading","level","TextParagraph","toggleBulletList","ListUl","toggleOrderedList","ListOl","toggleBlockquote","Quote","EditorContent","storage","characterCount","characters","MAX_CHARACTERS","validationSchema","Yup","title","required","max","concat","initialValues","honeypot","AddChapter","isDarkMode","useDarkMode","location","useLocation","storyId","parentChapter","navigationStack","state","addNotification","useNotifications","createChapter","useCreateChapter","navigate","useNavigate","error","useMutation","CREATE_CHAPTER","update","cache","data","getStory","readQuery","query","GET_STORY_BY_ID","variables","id","updatedChapters","chapters","writeQuery","getChapterChildren","GET_CHAPTER_CHILDREN","updatedChildren","console","log","chapter","message","formik","useFormik","onSubmit","values","parentChapterId","branch","catch","Form","handleSubmit","Group","controlId","Label","FormControl","type","placeholder","name","onChange","handleChange","onBlur","handleBlur","value","length","touched","errors","Text","style","display","TextEditor","updatedContent","setFieldValue","Button","variant"],"sourceRoot":""}