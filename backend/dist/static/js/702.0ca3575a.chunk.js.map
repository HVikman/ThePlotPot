{"version":3,"file":"static/js/702.0ca3575a.chunk.js","mappings":"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","sources":["pages/newstory/genres.js","pages/newstory/StoryForm.jsx","hooks/createStory.js","utils/charactercounter.js"],"sourcesContent":["export const genres = [\r\n  'Action and Adventure',\r\n  'Adventure',\r\n  'Alternate History',\r\n  'Anthology',\r\n  'Art',\r\n  'Autobiography',\r\n  'Biography',\r\n  'Childrens',\r\n  'Classic',\r\n  'Comic/Graphic Novel',\r\n  'Contemporary',\r\n  'Crime',\r\n  'Drama',\r\n  'Dystopian',\r\n  'Epic',\r\n  'Erotic Fiction',\r\n  'Fable',\r\n  'Fairy Tale',\r\n  'Fantasy',\r\n  'Gothic Fiction',\r\n  'Historical Fiction',\r\n  'Horror',\r\n  'Humor',\r\n  'Inspirational',\r\n  'Journal',\r\n  'LGBT',\r\n  'Literary Fiction',\r\n  'Military/War Fiction',\r\n  'Mystery',\r\n  'Mythology',\r\n  'Noir',\r\n  'Paranormal Romance',\r\n  'Philosophical',\r\n  'Poetry',\r\n  'Political',\r\n  'Post-Apocalyptic',\r\n  'Psychological Thriller',\r\n  'Religious',\r\n  'Romance',\r\n  'Satire',\r\n  'Science Fiction',\r\n  'Self-help',\r\n  'Short Story',\r\n  'Speculative Fiction',\r\n  'Spiritual',\r\n  'Sports',\r\n  'Suspense/Thriller',\r\n  'Travel',\r\n  'True Crime',\r\n  'Western',\r\n  'Young Adult (YA)'\r\n]\r\nexport default genres\r\n","import { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { Form, Button, Accordion, FormControl,FormSelect } from 'react-bootstrap'\r\nimport genres from './genres'\r\nimport ReactQuill from 'react-quill'\r\nimport 'quill/dist/quill.snow.css'\r\nimport '../../utils/charactercounter'\r\nimport './quill.css'\r\nimport '../../utils/theme.css'\r\nimport { useAuth } from '../auth/AuthContext'\r\nimport { useNotifications } from '../../components/NotificationsContext'\r\nimport { useCreateStory } from '../../hooks/createStory'\r\nimport { useDarkMode } from '../../components/DarkModeContext'\r\n\r\n// Quill modules\r\nconst quillModules = {\r\n  characterCounter: {\r\n    container: '#character-count',\r\n    maxChars: 12000\r\n  },\r\n  toolbar: [\r\n    [{ 'header': [1, 2, 3, false] }],\r\n    ['bold', 'italic', 'underline', 'blockquote'],\r\n    [{ 'list': 'ordered' }, { 'list': 'bullet' }],\r\n  ]\r\n}\r\n\r\n// Form validation schema\r\nconst validationSchema = Yup.object({\r\n  title: Yup.string()\r\n    .required('Required')\r\n    .max(100, 'Must be 100 characters or less'),\r\n  description: Yup.string()\r\n    .required('Required')\r\n    .max(500, 'Must be 450 characters or less'),\r\n  content: Yup.string().required('Required'),\r\n  genre: Yup.string().required('Required')\r\n})\r\n\r\nconst initialValues = {\r\n  title: '',\r\n  description: '',\r\n  content: '',\r\n  genre: '',\r\n  honeypot: '',\r\n}\r\n\r\nconst StoryForm = () => {\r\n  const { addNotification } = useNotifications()\r\n  const { user } = useAuth()\r\n  const isAuthenticated = !!user\r\n  const { isDarkMode } = useDarkMode()\r\n  const createStory = useCreateStory(addNotification)\r\n\r\n  const formik = useFormik({\r\n    initialValues,\r\n    validationSchema,\r\n    onSubmit: (values) => {\r\n      if (values.honeypot) {\r\n        console.log('Bot detected')\r\n        return\r\n      }\r\n      // eslint-disable-next-line no-undef\r\n      grecaptcha.ready(async () => {\r\n        // eslint-disable-next-line no-undef\r\n        const token = await grecaptcha.execute('6LfY0fooAAAAAKaljIbo723ZiMGApMCVg6ZU805o', { action: 'submit' })\r\n        createStory({\r\n          variables: {\r\n            title: values.title,\r\n            description: values.description,\r\n            genre: values.genre,\r\n            firstChapterContent: values.content,\r\n            token\r\n          }\r\n        }).catch(error => {\r\n          console.error('There was an error creating the chapter:', error)\r\n          addNotification(error.message, 3000, 'error')\r\n        })\r\n      })\r\n    },\r\n  })\r\n\r\n  if (!isAuthenticated) {\r\n    return <p>You are not logged in.</p>\r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={formik.handleSubmit}>\r\n      <Accordion defaultActiveKey=\"0\">\r\n        <Accordion.Item eventKey=\"0\" className={`${isDarkMode ? 'dark-mode' : 'light-mode'}`}>\r\n          <Accordion.Header>Step 1: Basic Details</Accordion.Header>\r\n          <Accordion.Body>\r\n            <Form.Group controlId=\"formTitle\">\r\n              <Form.Label>Title</Form.Label>\r\n              <FormControl\r\n                type=\"text\"\r\n                placeholder=\"Give your story a cool title\"\r\n                name=\"title\"\r\n                onChange={formik.handleChange}\r\n                onBlur={formik.handleBlur}\r\n                value={formik.values.title}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formDescription\">\r\n              <Form.Label>Description</Form.Label>\r\n              <FormControl\r\n                as=\"textarea\"\r\n                rows={4}\r\n                placeholder=\"Captivating description goes here!\"\r\n                name=\"description\"\r\n                onChange={formik.handleChange}\r\n                onBlur={formik.handleBlur}\r\n                value={formik.values.description}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formGenre\">\r\n              <Form.Label>Genre</Form.Label>\r\n              <FormSelect\r\n                name=\"genre\"\r\n                onChange={formik.handleChange}\r\n                onBlur={formik.handleBlur}\r\n                value={formik.values.genre}\r\n                className={`${isDarkMode ? 'dark-mode' : 'light-mode'}`}\r\n              >\r\n                <option value=\"\" label=\"Select genre\" />\r\n                {genres.map(genre => (\r\n                  <option key={genre} value={genre}>{genre}</option>\r\n                ))}\r\n              </FormSelect>\r\n            </Form.Group>\r\n            {/* Honeypot Field */}\r\n            <FormControl\r\n              type=\"text\"\r\n              name=\"honeypot\"\r\n              onChange={formik.handleChange}\r\n              value={formik.values.honeypot}\r\n              style={{ display: 'none' }}\r\n            />\r\n          </Accordion.Body>\r\n        </Accordion.Item>\r\n        <Accordion.Item eventKey=\"1\" className={`${isDarkMode ? 'dark-mode' : 'light-mode'}`}>\r\n          <Accordion.Header>Step 2: Story Content</Accordion.Header>\r\n          <Accordion.Body>\r\n            <ReactQuill\r\n              value={formik.values.content}\r\n              onChange={value => formik.setFieldValue('content', value)}\r\n              onBlur={() => formik.setFieldTouched('content', true)}\r\n              theme=\"snow\"\r\n              modules={quillModules}\r\n            />\r\n            <div id=\"character-count\"></div>\r\n          </Accordion.Body>\r\n        </Accordion.Item>\r\n      </Accordion>\r\n      <Button variant='secondary' type=\"submit\">Submit</Button>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default StoryForm\r\n","import { useMutation } from '@apollo/client'\r\nimport { GET_ALL_STORIES, CREATE_STORY } from '../api/queries'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nexport const useCreateStory = (addNotification) => {\r\n  const navigate = useNavigate()\r\n\r\n  const [createStory] = useMutation(CREATE_STORY, {\r\n    update: (cache, { data: { createStory } }) => {\r\n      if (createStory.success) {\r\n        addNotification(`${createStory.story.title} created successfully!`, 2000, 'success')\r\n        console.log('New Story ID:', createStory.story.id)\r\n        navigate(`/story/${createStory.story.id}`)\r\n      } else {\r\n        console.log('Failed to create story:', createStory.message)\r\n        addNotification(`Story creation failed: ${createStory.message}`, 2000, 'error')\r\n      }\r\n      const { getAllStories } = cache.readQuery({ query: GET_ALL_STORIES })\r\n      const updatedStories = [...getAllStories, createStory.story]\r\n      cache.writeQuery({\r\n        query: GET_ALL_STORIES,\r\n        data: { getAllStories: updatedStories }\r\n      })\r\n    }\r\n  })\r\n\r\n  return createStory\r\n}\r\n","import Quill from 'quill'\r\n\r\nclass CharacterCounter {\r\n  constructor(quill, options) {\r\n    this.quill = quill\r\n    this.options = options\r\n    this.container = document.querySelector(options.container)\r\n\r\n    quill.on('text-change', this.update.bind(this))\r\n    this.update()\r\n  }\r\n\r\n  calculate() {\r\n    let text = this.quill.getText()\r\n    return text.length -1\r\n  }\r\n\r\n  update() {\r\n    let charCount = this.calculate()\r\n    if (charCount > this.options.maxChars) {\r\n      let currentText = this.quill.getText()\r\n      let newText = currentText.substring(0, this.options.maxChars)\r\n      this.quill.setText(newText)\r\n    }\r\n    this.container.innerText = charCount + ' / ' + this.options.maxChars\r\n  }\r\n}\r\n\r\nQuill.register('modules/characterCounter', CharacterCounter)\r\n\r\nexport default CharacterCounter\r\n"],"names":["quillModules","characterCounter","container","maxChars","toolbar","validationSchema","Yup","title","required","max","description","content","genre","initialValues","honeypot","StoryForm","addNotification","useNotifications","user","useAuth","isAuthenticated","isDarkMode","useDarkMode","createStory","navigate","useNavigate","useMutation","CREATE_STORY","update","cache","_ref","data","success","concat","story","console","log","id","message","getAllStories","readQuery","query","GET_ALL_STORIES","updatedStories","writeQuery","useCreateStory","formik","useFormik","onSubmit","values","grecaptcha","ready","async","token","execute","action","variables","firstChapterContent","catch","error","_jsxs","Form","handleSubmit","children","Accordion","defaultActiveKey","Item","eventKey","className","_jsx","Header","Body","Group","controlId","Label","FormControl","type","placeholder","name","onChange","handleChange","onBlur","handleBlur","value","as","rows","FormSelect","label","genres","map","style","display","ReactQuill","setFieldValue","setFieldTouched","theme","modules","Button","variant","CharacterCounter","constructor","quill","options","this","document","querySelector","on","bind","calculate","getText","length","charCount","newText","substring","setText","innerText","Quill"],"sourceRoot":""}