{"version":3,"file":"static/js/629.5933e92b.chunk.js","mappings":"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","sources":["pages/newstory/AddChapter.jsx","hooks/createChapter.js","utils/charactercounter.js"],"sourcesContent":["import { useLocation } from 'react-router-dom'\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { Form, FormControl } from 'react-bootstrap'\r\nimport ReactQuill from 'react-quill'\r\nimport 'quill/dist/quill.snow.css'\r\nimport '../../utils/charactercounter'\r\nimport { useCreateChapter } from '../../hooks/createChapter'\r\nimport { useNotifications } from '../../components/NotificationsContext'\r\nimport './quill.css'\r\nimport { useDarkMode } from '../../components/DarkModeContext'\r\n\r\n\r\n// Form validation schema\r\nconst validationSchema = Yup.object({\r\n  title: Yup.string()\r\n    .required('Required')\r\n    .max(100, 'Must be 100 characters or less'),\r\n  content: Yup.string().required('Required')\r\n})\r\n\r\nconst initialValues = {\r\n  title: '',\r\n  content: '',\r\n  honeypot: ''\r\n}\r\n\r\nconst AddChapter = () => {\r\n  const { isDarkMode } = useDarkMode()\r\n  const location = useLocation()\r\n  const { storyId, parentChapter, navigationStack } = location.state\r\n  const { addNotification } = useNotifications()\r\n  const [createChapter, error] = useCreateChapter(storyId, parentChapter, navigationStack, addNotification)\r\n\r\n  const formik = useFormik({\r\n    initialValues,\r\n    validationSchema,\r\n    onSubmit: (values) => {\r\n      if (values.honeypot) {\r\n        console.log('Bot detected')\r\n        return\r\n      }\r\n      // eslint-disable-next-line no-undef\r\n      grecaptcha.ready(async () => {\r\n        // eslint-disable-next-line no-undef\r\n        const token = await grecaptcha.execute('6LfY0fooAAAAAKaljIbo723ZiMGApMCVg6ZU805o', { action: 'submit' })\r\n\r\n        createChapter({\r\n          variables: {\r\n            storyId: storyId,\r\n            parentChapterId: parentChapter.id,\r\n            branch: parentChapter.branch + 1,\r\n            title: values.title,\r\n            content: values.content,\r\n            token\r\n          }\r\n        }).catch(error => {\r\n          console.error('There was an error creating the chapter:', error)\r\n          addNotification(error.message, 3000, 'error')\r\n        })})\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className=\"add-chapter-container mx-4\">\r\n      <h2>Add a New Chapter</h2>\r\n      <Form onSubmit={formik.handleSubmit} className={`${isDarkMode ? 'dark-mode' : 'light-mode'}`}>\r\n        <Form.Group controlId=\"formTitle\">\r\n          <Form.Label>Title</Form.Label>\r\n          <FormControl\r\n            type=\"text\"\r\n            placeholder=\"Chapter title\"\r\n            name=\"title\"\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            value={formik.values.title}\r\n          />\r\n          {formik.touched.title && formik.errors.title && <Form.Text className=\"text-danger\">{formik.errors.title}</Form.Text>}\r\n        </Form.Group>\r\n        <Form.Group style={{ display: 'none' }} controlId=\"formHoneypot\">\r\n          <FormControl\r\n            type=\"text\"\r\n            name=\"honeypot\"\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            value={formik.values.honeypot}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formContent\">\r\n          <Form.Label>Content</Form.Label>\r\n          <ReactQuill\r\n            value={formik.values.content}\r\n            placeholder='Chapter content goes here...'\r\n            onChange={value => formik.setFieldValue('content', value)}\r\n            theme=\"snow\"\r\n            modules={{\r\n              characterCounter: {\r\n                container: '#char-count',\r\n                maxChars: 12000\r\n              },\r\n              toolbar: [\r\n                [{ 'header': [1, 2, 3, false] }],\r\n                ['bold', 'italic', 'underline', 'blockquote'],\r\n                [{ 'list': 'ordered' }, { 'list': 'bullet' }],\r\n              ]\r\n            }}\r\n          />\r\n          <div id='char-count'></div>\r\n          {formik.touched.content && formik.errors.content && <Form.Text className=\"text-danger\">{formik.errors.content}</Form.Text>}\r\n        </Form.Group>\r\n      </Form>\r\n\r\n      {/*\r\n      {error && <Alert type=\"error\" message={error.message} className=\"mt-3\" />} */}\r\n      {error}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddChapter\r\n","import { useMutation } from '@apollo/client'\r\nimport { CREATE_CHAPTER, GET_STORY_BY_ID, GET_CHAPTER_CHILDREN } from '../api/queries'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nexport const useCreateChapter = (storyId, parentChapter, navigationStack, addNotification) => {\r\n  const navigate = useNavigate()\r\n\r\n  const [createChapter, { error }] = useMutation(CREATE_CHAPTER, {\r\n    update: (cache, { data: { createChapter } }) => {\r\n      try {\r\n        const { getStory } = cache.readQuery({\r\n          query: GET_STORY_BY_ID,\r\n          variables: { id: storyId }\r\n        })\r\n\r\n        const updatedChapters = [...getStory.chapters, createChapter]\r\n\r\n        cache.writeQuery({\r\n          query: GET_STORY_BY_ID,\r\n          variables: { id: storyId },\r\n          data: {\r\n            getStory: {\r\n              ...getStory,\r\n              chapters: updatedChapters\r\n            }\r\n          }\r\n        })\r\n\r\n        const { getChapterChildren } = cache.readQuery({\r\n          query: GET_CHAPTER_CHILDREN,\r\n          variables: { id: parentChapter.id }\r\n        })\r\n\r\n        const updatedChildren = [...getChapterChildren, createChapter]\r\n\r\n        cache.writeQuery({\r\n          query: GET_CHAPTER_CHILDREN,\r\n          variables: { id: parentChapter.id },\r\n          data: {\r\n            getChapterChildren: updatedChildren\r\n          }\r\n        })\r\n        addNotification(`${createChapter.title} created successfully!`, 2000, 'success')\r\n        console.log(createChapter)\r\n        navigate(`/story/${storyId}`, {\r\n          state: {\r\n            chapter: createChapter,\r\n            navigationStack: [...navigationStack, parentChapter]\r\n          }\r\n        })\r\n      } catch (error) {\r\n        console.error('Error updating cache after adding chapter:', error)\r\n        addNotification(error.message, 2000, 'error')\r\n      }\r\n    }\r\n  })\r\n\r\n  return [createChapter, error]\r\n}","import Quill from 'quill'\r\n\r\nclass CharacterCounter {\r\n  constructor(quill, options) {\r\n    this.quill = quill\r\n    this.options = options\r\n    this.container = document.querySelector(options.container)\r\n\r\n    quill.on('text-change', this.update.bind(this))\r\n    this.update()\r\n  }\r\n\r\n  calculate() {\r\n    let text = this.quill.getText()\r\n    return text.length -1\r\n  }\r\n\r\n  update() {\r\n    let charCount = this.calculate()\r\n    if (charCount > this.options.maxChars) {\r\n      let currentText = this.quill.getText()\r\n      let newText = currentText.substring(0, this.options.maxChars)\r\n      this.quill.setText(newText)\r\n    }\r\n    this.container.innerText = charCount + ' / ' + this.options.maxChars\r\n  }\r\n}\r\n\r\nQuill.register('modules/characterCounter', CharacterCounter)\r\n\r\nexport default CharacterCounter\r\n"],"names":["validationSchema","Yup","title","required","max","content","initialValues","honeypot","AddChapter","isDarkMode","useDarkMode","location","useLocation","storyId","parentChapter","navigationStack","state","addNotification","useNotifications","createChapter","error","useCreateChapter","navigate","useNavigate","useMutation","CREATE_CHAPTER","update","cache","_ref","data","getStory","readQuery","query","GET_STORY_BY_ID","variables","id","updatedChapters","chapters","writeQuery","getChapterChildren","GET_CHAPTER_CHILDREN","updatedChildren","concat","console","log","chapter","message","formik","useFormik","onSubmit","values","grecaptcha","ready","async","token","execute","action","parentChapterId","branch","catch","_jsxs","className","children","_jsx","Form","handleSubmit","Group","controlId","Label","FormControl","type","placeholder","name","onChange","handleChange","onBlur","handleBlur","value","touched","errors","Text","style","display","ReactQuill","setFieldValue","theme","modules","characterCounter","container","maxChars","toolbar","CharacterCounter","constructor","quill","options","this","document","querySelector","on","bind","calculate","getText","length","charCount","newText","substring","setText","innerText","Quill"],"sourceRoot":""}