{"version":3,"file":"static/js/309.cefd5d94.chunk.js","mappings":"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","sources":["pages/newstory/genres.js","pages/newstory/StoryForm.jsx","hooks/createStory.js","utils/charactercounter.js"],"sourcesContent":["export const genres = [\r\n  'Action and Adventure',\r\n  'Adventure',\r\n  'Alternate History',\r\n  'Anthology',\r\n  'Art',\r\n  'Autobiography',\r\n  'Biography',\r\n  'Childrens',\r\n  'Classic',\r\n  'Comic/Graphic Novel',\r\n  'Contemporary',\r\n  'Crime',\r\n  'Drama',\r\n  'Dystopian',\r\n  'Epic',\r\n  'Erotic Fiction',\r\n  'Fable',\r\n  'Fairy Tale',\r\n  'Fantasy',\r\n  'Gothic Fiction',\r\n  'Historical Fiction',\r\n  'Horror',\r\n  'Humor',\r\n  'Inspirational',\r\n  'Journal',\r\n  'LGBT',\r\n  'Literary Fiction',\r\n  'Military/War Fiction',\r\n  'Mystery',\r\n  'Mythology',\r\n  'Noir',\r\n  'Paranormal Romance',\r\n  'Philosophical',\r\n  'Poetry',\r\n  'Political',\r\n  'Post-Apocalyptic',\r\n  'Psychological Thriller',\r\n  'Religious',\r\n  'Romance',\r\n  'Satire',\r\n  'Science Fiction',\r\n  'Self-help',\r\n  'Short Story',\r\n  'Speculative Fiction',\r\n  'Spiritual',\r\n  'Sports',\r\n  'Suspense/Thriller',\r\n  'Travel',\r\n  'True Crime',\r\n  'Western',\r\n  'Young Adult (YA)'\r\n]\r\nexport default genres\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { AutoComplete, Collapse, Input, Form } from 'antd'\r\nimport { Button } from 'react-bootstrap'\r\nimport genres from './genres'\r\nimport ReactQuill from 'react-quill'\r\nimport 'quill/dist/quill.snow.css'\r\nimport '../../utils/charactercounter'\r\nimport './quill.css'\r\n\r\nimport { useAuth } from '../auth/AuthContext'\r\nimport { useNotifications } from '../../components/NotificationsContext'\r\nimport { useCreateStory } from '../../hooks/createStory'\r\n\r\n// Form validation schema\r\nconst validationSchema = Yup.object({\r\n  title: Yup.string()\r\n    .required('Required')\r\n    .max(100, 'Must be 100 characters or less'),\r\n  description: Yup.string()\r\n    .required('Required')\r\n    .max(500, 'Must be 450 characters or less'),\r\n  content: Yup.string().required('Required'),\r\n  genre: Yup.string().required('Required')\r\n})\r\n\r\nconst initialValues = {\r\n  title: '',\r\n  description: '',\r\n  content: '',\r\n  genre: '',\r\n  honeypot: '',\r\n}\r\n\r\n// Quill modules\r\nconst quillModules = {\r\n  characterCounter: {\r\n    container: '#character-count',\r\n    maxChars: 12000\r\n  },\r\n  toolbar: [\r\n    [{ 'header': [1, 2, 3, false] }],\r\n    ['bold', 'italic', 'underline', 'blockquote'],\r\n    [{ 'list': 'ordered' }, { 'list': 'bullet' }],\r\n  ]\r\n}\r\n\r\nconst StoryForm = () => {\r\n  const { addNotification } = useNotifications()\r\n  const { user } = useAuth()\r\n  const isAuthenticated = !!user\r\n\r\n  const [disabledPanels, setDisabledPanels] = useState('disabled')\r\n\r\n  const createStory = useCreateStory(addNotification)\r\n\r\n  const formik = useFormik({\r\n    initialValues,\r\n    validationSchema,\r\n    onSubmit: (values) => {\r\n      if (values.honeypot) {\r\n        console.log('Bot detected')\r\n        return\r\n      }\r\n      // eslint-disable-next-line no-undef\r\n      grecaptcha.ready(async () => {\r\n        // eslint-disable-next-line no-undef\r\n        const token = await grecaptcha.execute('6LfY0fooAAAAAKaljIbo723ZiMGApMCVg6ZU805o', { action: 'submit' })\r\n\r\n        createStory({\r\n          variables: {\r\n            title: values.title,\r\n            description: values.description,\r\n            genre: values.genre,\r\n            firstChapterContent: values.content,\r\n            token\r\n          }\r\n        }).catch(error => {\r\n          console.error('There was an error creating the chapter:', error)\r\n          addNotification(error.message, 3000, 'error')\r\n        })})\r\n    },\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (formik.values.title && formik.values.description && formik.values.genre) {\r\n      setDisabledPanels('')\r\n    } else {\r\n      setDisabledPanels('disabled')\r\n    }\r\n  }, [formik.values.title, formik.values.description, formik.values.genre])\r\n\r\n  if (!isAuthenticated) {\r\n    return <p>You are not logged in.</p>\r\n  }\r\n\r\n  const items = [\r\n    {\r\n      key: '1',\r\n      label: 'Step 1: Basic Details',\r\n      children: (\r\n        <Form layout=\"vertical\" onSubmit={formik.handleSubmit} className='mx-2'>\r\n          <Form.Item label=\"Title\" help={formik.touched.title && formik.errors.title}>\r\n            <Input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              placeholder=\"Give your story a cool title\"\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              value={formik.values.title}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item label=\"Description\" help={formik.touched.description && formik.errors.description}>\r\n            <Input.TextArea\r\n              name=\"description\"\r\n              placeholder='Captivating description goes here!'\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              value={formik.values.description}\r\n              rows={4}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item style={{ display: 'none' }}>\r\n            <Input\r\n              type=\"text\"\r\n              name=\"honeypot\"\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              value={formik.values.honeypot}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item label=\"Genre\" help={formik.touched.genre && formik.errors.genre}>\r\n            <AutoComplete\r\n              value={formik.values.genre}\r\n              onChange={value => formik.setFieldValue('genre', value)}\r\n              style={{ width: '100%' }}\r\n              options={genres.map(genre => ({ value: genre }))}\r\n              placeholder=\"Select a genre\"\r\n              filterOption={(inputValue, option) =>\r\n                option.value.toUpperCase().includes(inputValue.toUpperCase())\r\n              }\r\n            />\r\n          </Form.Item>\r\n        </Form>\r\n      )\r\n    },\r\n    {\r\n      key: '2',\r\n      collapsible: disabledPanels,\r\n      label: 'Step 2: Story Content',\r\n      children: (\r\n        <div className='mx-2'>\r\n          <ReactQuill\r\n            value={formik.values.content}\r\n            onChange={value => formik.setFieldValue('content', value)}\r\n            theme=\"snow\"\r\n            modules={quillModules}\r\n          />\r\n          <div id=\"character-count\"></div>\r\n          <Button variant='secondary' onClick={() => formik.handleSubmit()}>Submit</Button>\r\n        </div>\r\n      )\r\n    }\r\n  ]\r\n\r\n  return (\r\n    <Collapse items={items} defaultActiveKey={['1']} />\r\n  )\r\n}\r\n\r\nexport default StoryForm\r\n","import { useMutation } from '@apollo/client'\r\nimport { GET_ALL_STORIES, CREATE_STORY } from '../api/queries'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nexport const useCreateStory = (addNotification) => {\r\n  const navigate = useNavigate()\r\n\r\n  const [createStory] = useMutation(CREATE_STORY, {\r\n    update: (cache, { data: { createStory } }) => {\r\n      if (createStory.success) {\r\n        addNotification(`${createStory.story.title} created successfully!`, 2000, 'success')\r\n        console.log('New Story ID:', createStory.story.id)\r\n        navigate(`/story/${createStory.story.id}`)\r\n      } else {\r\n        console.log('Failed to create story:', createStory.message)\r\n        addNotification(`Story creation failed: ${createStory.message}`, 2000, 'error')\r\n      }\r\n      const { getAllStories } = cache.readQuery({ query: GET_ALL_STORIES })\r\n      const updatedStories = [...getAllStories, createStory.story]\r\n      cache.writeQuery({\r\n        query: GET_ALL_STORIES,\r\n        data: { getAllStories: updatedStories }\r\n      })\r\n    }\r\n  })\r\n\r\n  return createStory\r\n}\r\n","import Quill from 'quill'\r\n\r\nclass CharacterCounter {\r\n  constructor(quill, options) {\r\n    this.quill = quill\r\n    this.options = options\r\n    this.container = document.querySelector(options.container)\r\n\r\n    quill.on('text-change', this.update.bind(this))\r\n    this.update()\r\n  }\r\n\r\n  calculate() {\r\n    let text = this.quill.getText()\r\n    return text.length\r\n  }\r\n\r\n  update() {\r\n    let charCount = this.calculate()\r\n    if (charCount > this.options.maxChars) {\r\n      let currentText = this.quill.getText()\r\n      let newText = currentText.substring(0, this.options.maxChars)\r\n      this.quill.setText(newText)\r\n    }\r\n    this.container.innerText = charCount + ' / ' + this.options.maxChars\r\n  }\r\n}\r\n\r\nQuill.register('modules/characterCounter', CharacterCounter)\r\n\r\nexport default CharacterCounter\r\n"],"names":["validationSchema","Yup","title","required","max","description","content","genre","initialValues","honeypot","quillModules","characterCounter","container","maxChars","toolbar","addNotification","useNotifications","isAuthenticated","useAuth","user","_useState","useState","_useState2","_slicedToArray","disabledPanels","setDisabledPanels","createStory","navigate","useNavigate","_useMutation","useMutation","CREATE_STORY","update","cache","_ref","data","success","concat","story","console","log","id","message","getAllStories","readQuery","query","GET_ALL_STORIES","updatedStories","_toConsumableArray","writeQuery","useCreateStory","formik","useFormik","onSubmit","values","grecaptcha","ready","_asyncToGenerator","_regeneratorRuntime","mark","_callee","token","wrap","_context","prev","next","execute","action","sent","variables","firstChapterContent","catch","error","stop","useEffect","_jsx","children","items","key","label","_jsxs","Form","layout","handleSubmit","className","Item","help","touched","errors","Input","type","name","placeholder","onChange","handleChange","onBlur","handleBlur","value","TextArea","rows","style","display","AutoComplete","setFieldValue","width","options","genres","map","filterOption","inputValue","option","toUpperCase","includes","collapsible","ReactQuill","theme","modules","Button","variant","onClick","Collapse","defaultActiveKey","CharacterCounter","quill","_classCallCheck","this","document","querySelector","on","bind","_createClass","getText","length","charCount","calculate","newText","substring","setText","innerText","Quill"],"sourceRoot":""}